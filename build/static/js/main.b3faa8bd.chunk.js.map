{"version":3,"sources":["App/Form.jsx","App/Header.jsx","App/Todo.jsx","App/TodoList.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["Form","arr","createTodo","error","useState","todoText","setTodoText","className","onSubmit","event","preventDefault","placeholder","Math","floor","random","length","type","value","onChange","target","Header","href","Todo","toggleDone","deleteTodo","done","id","onClick","stopPropagation","TodoList","todos","map","todoItem","key","App","initTodos","localStorage","getItem","JSON","parse","setTodos","setError","updateTodos","todoArray","setItem","stringify","setTimeout","test","newTodo","uuidv4","newTodos","todo","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b3faa8bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Form.css';\n\nexport default function Form({ createTodo, error }) {\n  const [todoText, setTodoText] = useState('');\n\n  const handleChange = (event) => {\n    setTodoText(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    createTodo(todoText);\n    setTodoText('');\n  };\n\n  const randomTodos = ['Do the dishes...', 'Clean the house...', 'Buy milk...', 'Add todos to the list...']\n\n  const pickARandomTodo = (arr) => arr[Math.floor(Math.random() * (arr.length))];\n\n  return (\n    <form className=\"todoForm\" onSubmit={handleSubmit}>\n      <input\n        className=\"todoForm__field\"\n        placeholder={pickARandomTodo(randomTodos)}\n        type=\"text\"\n        value={todoText}\n        onChange={handleChange}\n      />\n      <input className=\"todoForm__button\" type=\"submit\" value=\"Create todo\" />\n      {error ? <p className=\"todoForm__errorDisplay\">{error}</p> : null}\n    </form>\n  );\n}\n","import React from 'react';\nimport './Header.css';\nimport Form from './Form';\n\nexport default function Header({ error, createTodo }) {\n  return (\n    <nav className=\"header\">\n      <h1 className=\"header__headline\">\n        <a className=\"header__headlineLink\" href=\"https://github.com/Ymirke/react-todo\">React todo</a>\n      </h1>\n      <Form createTodo={createTodo} error={error} />\n    </nav>\n  );\n}\n","import React from 'react'\nimport './Todo.css'\n\nexport default function Todo ({toggleDone, deleteTodo, todoText, done, id }) {\n  if (done) {\n    return (\n      <article onClick={() => { toggleDone(id) }} className=\"todoItem todoItem--done\">\n        <h3 className=\"todoItem__text\">{todoText}</h3>\n        <button className=\"todoItem__deleteButton\" onClick={(event) => { \n          event.stopPropagation(); \n          deleteTodo(id);\n        }}>Remove</button>\n      </article >\n    )\n  } else {\n    return (\n      <article onClick={() => { toggleDone(id) }} className=\"todoItem\">\n        <h3 className=\"todoItem__text\">{todoText}</h3>\n      </article>\n    )\n  }\n}\n","import React from 'react'\nimport Todo from './Todo'\nimport './TodoList.css'\n\nexport default function TodoList ({todos, toggleDone, deleteTodo}) {\n  return (\n    <section className=\"TodoList\">\n      {\n        todos.map((todoItem) => {\n          if (!todoItem.done) return (\n            <Todo\n              toggleDone={toggleDone}\n              deleteTodo={deleteTodo}\n              todoText={todoItem.todoText}\n              done={todoItem.done}\n              id={todoItem.id}\n              key={todoItem.id}\n            />\n          )\n          return undefined;\n        })\n      }\n      {\n        todos.map((todoItem) => {\n          if (todoItem.done) return (\n            <Todo\n              toggleDone={toggleDone}\n              deleteTodo={deleteTodo}\n              todoText={todoItem.todoText}\n              done={todoItem.done}\n              id={todoItem.id}\n              key={todoItem.id}\n            />\n          ) \n          return undefined;\n        })\n      }\n    </section>\n  )\n}\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Header from './Header';\nimport TodoList from './TodoList';\nimport './reset.css';\nimport './App.css';\n\nexport default function App() {\n  const initTodos = localStorage.getItem('todos') ? JSON.parse(localStorage.getItem('todos')) : [];\n  const [todos, setTodos] = useState(initTodos);\n  const [error, setError] = useState('');\n\n  const updateTodos = (todoArray) => {\n    setTodos(todoArray);\n    localStorage.setItem('todos', JSON.stringify(todoArray))\n  };\n\n  const toggleDone = (id) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        // eslint-disable-next-line no-param-reassign\n        todo.done = !todo.done;\n        return todo;\n      }\n      return todo;\n    });\n    updateTodos(newTodos);\n  };\n\n  const createTodo = (todoText) => {\n    if (!todoText) {\n      setError('Add a text to your todo');\n      return setTimeout(() => setError(''), 3000);\n    }\n\n    if (!/\\S/.test(todoText)) {\n      setError('Todo cannot be spaces');\n      return setTimeout(() => setError(''), 3000);\n    }\n\n    const newTodo = {\n      todoText,\n      done: false,\n      id: uuidv4(),\n    };\n\n    return updateTodos([...todos, newTodo]);\n  };\n\n  const deleteTodo = (id) => {\n    const newTodos = todos.filter((todoItem) => todoItem.id !== id);\n    updateTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header error={error} createTodo={createTodo} />\n      <TodoList\n        todos={todos}\n        toggleDone={toggleDone}\n        deleteTodo={deleteTodo}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}